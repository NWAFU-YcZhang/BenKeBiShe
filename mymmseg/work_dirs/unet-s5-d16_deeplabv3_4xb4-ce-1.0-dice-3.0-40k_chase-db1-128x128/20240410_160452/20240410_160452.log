2024/04/10 16:04:53 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: darwin
    Python: 3.8.19 (default, Mar 20 2024, 15:27:52) [Clang 14.0.6 ]
    CUDA available: False
    MUSA available: False
    numpy_random_seed: 505209695
    GCC: Apple clang version 15.0.0 (clang-1500.3.9.4)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 4.2
  - C++ Version: 201703
  - clang 13.1.6
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: NO AVX
  - Build settings: BLAS_INFO=accelerate, BUILD_TYPE=Release, CXX_COMPILER=/Applications/Xcode_13.3.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++, CXX_FLAGS= -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_PYTORCH_METAL_EXPORT -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DUSE_COREML_DELEGATE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=braced-scalar-init -Werror=range-loop-construct -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wvla-extension -Wnewline-eof -Winconsistent-missing-override -Winconsistent-missing-destructor-override -Wno-range-loop-analysis -Wno-pass-failed -Wsuggest-override -Wno-error=pedantic -Wno-error=old-style-cast -Wno-error=inconsistent-missing-override -Wno-error=inconsistent-missing-destructor-override -Wconstant-conversion -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-missing-braces -Wunused-lambda-capture -Qunused-arguments -fcolor-diagnostics -faligned-new -Wno-unused-but-set-variable -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -DUSE_MPS -Wno-unused-private-field -Wno-missing-braces, LAPACK_INFO=accelerate, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.1.2, USE_CUDA=0, USE_CUDNN=OFF, USE_EIGEN_FOR_BLAS=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=OFF, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=ON, USE_OPENMP=OFF, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 505209695
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/04/10 16:04:53 - mmengine - INFO - Config:
crop_size = (
    128,
    128,
)
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        128,
        128,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/CHASE_DB1'
dataset_type = 'ChaseDB1Dataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=4000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
img_scale = (
    960,
    999,
)
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    auxiliary_head=dict(
        align_corners=False,
        channels=64,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=128,
        in_index=3,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=2,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        act_cfg=dict(type='ReLU'),
        base_channels=64,
        conv_cfg=None,
        dec_dilations=(
            1,
            1,
            1,
            1,
        ),
        dec_num_convs=(
            2,
            2,
            2,
            2,
        ),
        downsamples=(
            True,
            True,
            True,
            True,
        ),
        enc_dilations=(
            1,
            1,
            1,
            1,
            1,
        ),
        enc_num_convs=(
            2,
            2,
            2,
            2,
            2,
        ),
        in_channels=3,
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        norm_eval=False,
        num_stages=5,
        strides=(
            1,
            1,
            1,
            1,
            1,
        ),
        type='UNet',
        upsample_cfg=dict(type='InterpConv'),
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            128,
            128,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=16,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        dropout_ratio=0.1,
        in_channels=64,
        in_index=4,
        loss_decode=[
            dict(
                loss_name='loss_ce', loss_weight=1.0, type='CrossEntropyLoss'),
            dict(loss_name='loss_dice', loss_weight=3.0, type='DiceLoss'),
        ],
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=2,
        type='ASPPHead'),
    pretrained=None,
    test_cfg=dict(crop_size=(
        128,
        128,
    ), mode='slide', stride=(
        85,
        85,
    )),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=40000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/CHASE_DB1',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                960,
                999,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ChaseDB1Dataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mDice',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        960,
        999,
    ), type='Resize'),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(max_iters=40000, type='IterBasedTrainLoop', val_interval=4000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        dataset=dict(
            data_prefix=dict(
                img_path='images/training',
                seg_map_path='annotations/training'),
            data_root='data/CHASE_DB1',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='LoadAnnotations'),
                dict(
                    keep_ratio=True,
                    ratio_range=(
                        0.5,
                        2.0,
                    ),
                    scale=(
                        960,
                        999,
                    ),
                    type='RandomResize'),
                dict(
                    cat_max_ratio=0.75,
                    crop_size=(
                        128,
                        128,
                    ),
                    type='RandomCrop'),
                dict(prob=0.5, type='RandomFlip'),
                dict(type='PhotoMetricDistortion'),
                dict(type='PackSegInputs'),
            ],
            type='ChaseDB1Dataset'),
        times=40000,
        type='RepeatDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            960,
            999,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        128,
        128,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/CHASE_DB1',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                960,
                999,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ChaseDB1Dataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mDice',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/unet-s5-d16_deeplabv3_4xb4-ce-1.0-dice-3.0-40k_chase-db1-128x128'

2024/04/10 16:04:55 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/04/10 16:04:55 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/04/10 16:04:56 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Name of parameter - Initialization information

backbone.encoder.0.0.convs.0.conv.weight - torch.Size([64, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.0.0.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.0.0.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.0.0.convs.1.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.0.0.convs.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.0.0.convs.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.0.conv.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.1.1.convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.1.1.convs.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.0.conv.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.2.1.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.2.1.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.0.conv.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.3.1.convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.1.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.3.1.convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.4.1.convs.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.1.conv.weight - torch.Size([1024, 1024, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.4.1.convs.1.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.1.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.0.conv.weight - torch.Size([64, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.0.conv_block.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.1.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.0.conv_block.convs.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.upsample.interp_upsample.1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.0.upsample.interp_upsample.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.upsample.interp_upsample.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.0.conv.weight - torch.Size([128, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.1.conv_block.convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.1.conv_block.convs.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.upsample.interp_upsample.1.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.1.upsample.interp_upsample.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.upsample.interp_upsample.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.0.conv.weight - torch.Size([256, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.2.conv_block.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.2.conv_block.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.upsample.interp_upsample.1.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.2.upsample.interp_upsample.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.upsample.interp_upsample.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.0.conv.weight - torch.Size([512, 1024, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.3.conv_block.convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.1.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.3.conv_block.convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.upsample.interp_upsample.1.conv.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.3.upsample.interp_upsample.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.upsample.interp_upsample.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([2, 16, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.image_pool.1.conv.weight - torch.Size([16, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.image_pool.1.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.image_pool.1.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.conv.weight - torch.Size([16, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.conv.weight - torch.Size([16, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.conv.weight - torch.Size([16, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.conv.weight - torch.Size([16, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([16, 80, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([2, 64, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([64, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2024/04/10 16:04:57 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/04/10 16:04:57 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/04/10 16:04:57 - mmengine - INFO - Checkpoints will be saved to /Users/zhangyuchen/Desktop/WorkSpace/mymmseg/work_dirs/unet-s5-d16_deeplabv3_4xb4-ce-1.0-dice-3.0-40k_chase-db1-128x128.
2024/04/10 16:05:08 - mmengine - INFO - Iter(train) [   50/40000]  lr: 9.9891e-03  eta: 2:20:53  time: 0.1951  data_time: 0.0024  loss: 1.1562  decode.loss_ce: 0.4762  decode.loss_dice: 0.4995  decode.acc_seg: 77.8137  aux.loss_ce: 0.1804  aux.acc_seg: 77.8137
2024/04/10 16:05:17 - mmengine - INFO - Iter(train) [  100/40000]  lr: 9.9779e-03  eta: 2:15:09  time: 0.1936  data_time: 0.0025  loss: 1.1939  decode.loss_ce: 0.4830  decode.loss_dice: 0.5242  decode.acc_seg: 79.4739  aux.loss_ce: 0.1867  aux.acc_seg: 79.4739
2024/04/10 16:05:27 - mmengine - INFO - Iter(train) [  150/40000]  lr: 9.9668e-03  eta: 2:12:49  time: 0.1912  data_time: 0.0025  loss: 1.1266  decode.loss_ce: 0.4576  decode.loss_dice: 0.4915  decode.acc_seg: 75.4135  aux.loss_ce: 0.1774  aux.acc_seg: 76.1475
2024/04/10 16:05:37 - mmengine - INFO - Iter(train) [  200/40000]  lr: 9.9557e-03  eta: 2:11:36  time: 0.1925  data_time: 0.0025  loss: 1.0596  decode.loss_ce: 0.4322  decode.loss_dice: 0.4495  decode.acc_seg: 76.8875  aux.loss_ce: 0.1780  aux.acc_seg: 76.8875
2024/04/10 16:05:46 - mmengine - INFO - Iter(train) [  250/40000]  lr: 9.9445e-03  eta: 2:10:39  time: 0.1933  data_time: 0.0024  loss: 1.0699  decode.loss_ce: 0.4460  decode.loss_dice: 0.4495  decode.acc_seg: 80.9494  aux.loss_ce: 0.1745  aux.acc_seg: 82.0419
2024/04/10 16:05:56 - mmengine - INFO - Iter(train) [  300/40000]  lr: 9.9334e-03  eta: 2:09:59  time: 0.1940  data_time: 0.0024  loss: 0.9176  decode.loss_ce: 0.3651  decode.loss_dice: 0.3941  decode.acc_seg: 83.4396  aux.loss_ce: 0.1584  aux.acc_seg: 82.4188
2024/04/10 16:06:06 - mmengine - INFO - Iter(train) [  350/40000]  lr: 9.9222e-03  eta: 2:09:34  time: 0.1956  data_time: 0.0029  loss: 0.9287  decode.loss_ce: 0.3805  decode.loss_dice: 0.3926  decode.acc_seg: 93.2907  aux.loss_ce: 0.1556  aux.acc_seg: 92.2073
2024/04/10 16:06:15 - mmengine - INFO - Iter(train) [  400/40000]  lr: 9.9111e-03  eta: 2:09:10  time: 0.1939  data_time: 0.0023  loss: 0.9097  decode.loss_ce: 0.3790  decode.loss_dice: 0.3790  decode.acc_seg: 88.9877  aux.loss_ce: 0.1518  aux.acc_seg: 89.2593
2024/04/10 16:06:25 - mmengine - INFO - Iter(train) [  450/40000]  lr: 9.8999e-03  eta: 2:08:47  time: 0.1916  data_time: 0.0025  loss: 0.9678  decode.loss_ce: 0.4099  decode.loss_dice: 0.4007  decode.acc_seg: 81.5857  aux.loss_ce: 0.1572  aux.acc_seg: 83.3786
2024/04/10 16:06:35 - mmengine - INFO - Iter(train) [  500/40000]  lr: 9.8888e-03  eta: 2:08:26  time: 0.1938  data_time: 0.0025  loss: 0.9995  decode.loss_ce: 0.4145  decode.loss_dice: 0.4209  decode.acc_seg: 84.0149  aux.loss_ce: 0.1640  aux.acc_seg: 81.9199
2024/04/10 16:06:44 - mmengine - INFO - Iter(train) [  550/40000]  lr: 9.8776e-03  eta: 2:08:12  time: 0.1942  data_time: 0.0024  loss: 0.6873  decode.loss_ce: 0.2651  decode.loss_dice: 0.3049  decode.acc_seg: 88.7177  aux.loss_ce: 0.1172  aux.acc_seg: 87.3947
2024/04/10 16:06:54 - mmengine - INFO - Iter(train) [  600/40000]  lr: 9.8665e-03  eta: 2:07:58  time: 0.1931  data_time: 0.0023  loss: 0.8684  decode.loss_ce: 0.3531  decode.loss_dice: 0.3773  decode.acc_seg: 87.4924  aux.loss_ce: 0.1380  aux.acc_seg: 86.7401
2024/04/10 16:07:04 - mmengine - INFO - Iter(train) [  650/40000]  lr: 9.8553e-03  eta: 2:07:43  time: 0.1949  data_time: 0.0024  loss: 0.8098  decode.loss_ce: 0.3300  decode.loss_dice: 0.3412  decode.acc_seg: 82.9849  aux.loss_ce: 0.1386  aux.acc_seg: 81.7322
2024/04/10 16:07:13 - mmengine - INFO - Iter(train) [  700/40000]  lr: 9.8442e-03  eta: 2:07:34  time: 0.1956  data_time: 0.0024  loss: 0.7988  decode.loss_ce: 0.3427  decode.loss_dice: 0.3277  decode.acc_seg: 86.9598  aux.loss_ce: 0.1283  aux.acc_seg: 87.5183
2024/04/10 16:07:23 - mmengine - INFO - Iter(train) [  750/40000]  lr: 9.8330e-03  eta: 2:07:18  time: 0.1910  data_time: 0.0025  loss: 0.9066  decode.loss_ce: 0.3850  decode.loss_dice: 0.3766  decode.acc_seg: 87.6587  aux.loss_ce: 0.1450  aux.acc_seg: 85.7910
2024/04/10 16:07:32 - mmengine - INFO - Iter(train) [  800/40000]  lr: 9.8218e-03  eta: 2:07:00  time: 0.1917  data_time: 0.0025  loss: 0.8132  decode.loss_ce: 0.3317  decode.loss_dice: 0.3507  decode.acc_seg: 88.4491  aux.loss_ce: 0.1308  aux.acc_seg: 90.1230
2024/04/10 16:07:42 - mmengine - INFO - Iter(train) [  850/40000]  lr: 9.8107e-03  eta: 2:06:46  time: 0.1961  data_time: 0.0025  loss: 0.7296  decode.loss_ce: 0.3011  decode.loss_dice: 0.3053  decode.acc_seg: 92.5201  aux.loss_ce: 0.1232  aux.acc_seg: 93.5974
2024/04/10 16:07:52 - mmengine - INFO - Iter(train) [  900/40000]  lr: 9.7995e-03  eta: 2:06:33  time: 0.1926  data_time: 0.0025  loss: 0.8088  decode.loss_ce: 0.3405  decode.loss_dice: 0.3389  decode.acc_seg: 86.0397  aux.loss_ce: 0.1294  aux.acc_seg: 84.8862
2024/04/10 16:08:01 - mmengine - INFO - Iter(train) [  950/40000]  lr: 9.7884e-03  eta: 2:06:19  time: 0.1928  data_time: 0.0025  loss: 0.7942  decode.loss_ce: 0.3267  decode.loss_dice: 0.3417  decode.acc_seg: 91.7450  aux.loss_ce: 0.1258  aux.acc_seg: 94.0720
2024/04/10 16:08:11 - mmengine - INFO - Exp name: unet-s5-d16_deeplabv3_4xb4-ce-1.0-dice-3.0-40k_chase-db1-128x128_20240410_160452
2024/04/10 16:08:11 - mmengine - INFO - Iter(train) [ 1000/40000]  lr: 9.7772e-03  eta: 2:06:09  time: 0.1948  data_time: 0.0024  loss: 0.8321  decode.loss_ce: 0.3670  decode.loss_dice: 0.3322  decode.acc_seg: 87.4817  aux.loss_ce: 0.1328  aux.acc_seg: 87.3413
2024/04/10 16:08:21 - mmengine - INFO - Iter(train) [ 1050/40000]  lr: 9.7660e-03  eta: 2:05:59  time: 0.1958  data_time: 0.0023  loss: 0.6609  decode.loss_ce: 0.2773  decode.loss_dice: 0.2785  decode.acc_seg: 84.5016  aux.loss_ce: 0.1051  aux.acc_seg: 82.0923
2024/04/10 16:08:30 - mmengine - INFO - Iter(train) [ 1100/40000]  lr: 9.7549e-03  eta: 2:05:50  time: 0.1948  data_time: 0.0024  loss: 0.6844  decode.loss_ce: 0.2799  decode.loss_dice: 0.2968  decode.acc_seg: 92.0029  aux.loss_ce: 0.1078  aux.acc_seg: 90.9286
2024/04/10 16:08:40 - mmengine - INFO - Iter(train) [ 1150/40000]  lr: 9.7437e-03  eta: 2:05:42  time: 0.1960  data_time: 0.0024  loss: 0.7229  decode.loss_ce: 0.2936  decode.loss_dice: 0.3081  decode.acc_seg: 88.2355  aux.loss_ce: 0.1212  aux.acc_seg: 85.5286
2024/04/10 16:08:50 - mmengine - INFO - Iter(train) [ 1200/40000]  lr: 9.7325e-03  eta: 2:05:35  time: 0.2019  data_time: 0.0024  loss: 0.7650  decode.loss_ce: 0.3247  decode.loss_dice: 0.3187  decode.acc_seg: 79.3427  aux.loss_ce: 0.1215  aux.acc_seg: 79.4296
2024/04/10 16:09:00 - mmengine - INFO - Iter(train) [ 1250/40000]  lr: 9.7213e-03  eta: 2:05:24  time: 0.1924  data_time: 0.0025  loss: 0.8274  decode.loss_ce: 0.3518  decode.loss_dice: 0.3375  decode.acc_seg: 90.6067  aux.loss_ce: 0.1382  aux.acc_seg: 89.9994
2024/04/10 16:09:09 - mmengine - INFO - Iter(train) [ 1300/40000]  lr: 9.7102e-03  eta: 2:05:15  time: 0.1940  data_time: 0.0024  loss: 0.6822  decode.loss_ce: 0.2853  decode.loss_dice: 0.2827  decode.acc_seg: 95.1828  aux.loss_ce: 0.1142  aux.acc_seg: 94.1284
2024/04/10 16:09:19 - mmengine - INFO - Iter(train) [ 1350/40000]  lr: 9.6990e-03  eta: 2:05:05  time: 0.1925  data_time: 0.0025  loss: 0.7337  decode.loss_ce: 0.3053  decode.loss_dice: 0.3115  decode.acc_seg: 88.5544  aux.loss_ce: 0.1170  aux.acc_seg: 90.3305
2024/04/10 16:09:29 - mmengine - INFO - Iter(train) [ 1400/40000]  lr: 9.6878e-03  eta: 2:04:53  time: 0.1919  data_time: 0.0025  loss: 0.6424  decode.loss_ce: 0.2670  decode.loss_dice: 0.2722  decode.acc_seg: 90.6967  aux.loss_ce: 0.1032  aux.acc_seg: 89.2120
2024/04/10 16:09:38 - mmengine - INFO - Iter(train) [ 1450/40000]  lr: 9.6766e-03  eta: 2:04:42  time: 0.1910  data_time: 0.0025  loss: 0.6709  decode.loss_ce: 0.2752  decode.loss_dice: 0.2832  decode.acc_seg: 95.4483  aux.loss_ce: 0.1126  aux.acc_seg: 94.4672
2024/04/10 16:09:48 - mmengine - INFO - Iter(train) [ 1500/40000]  lr: 9.6655e-03  eta: 2:04:28  time: 0.1910  data_time: 0.0025  loss: 0.7140  decode.loss_ce: 0.2984  decode.loss_dice: 0.3019  decode.acc_seg: 90.5090  aux.loss_ce: 0.1137  aux.acc_seg: 89.2593
2024/04/10 16:09:58 - mmengine - INFO - Iter(train) [ 1550/40000]  lr: 9.6543e-03  eta: 2:04:16  time: 0.1941  data_time: 0.0025  loss: 0.7193  decode.loss_ce: 0.2995  decode.loss_dice: 0.3031  decode.acc_seg: 92.3950  aux.loss_ce: 0.1167  aux.acc_seg: 91.0690
2024/04/10 16:10:07 - mmengine - INFO - Iter(train) [ 1600/40000]  lr: 9.6431e-03  eta: 2:04:04  time: 0.1946  data_time: 0.0025  loss: 0.7196  decode.loss_ce: 0.3049  decode.loss_dice: 0.2979  decode.acc_seg: 87.5229  aux.loss_ce: 0.1168  aux.acc_seg: 84.7168
2024/04/10 16:10:17 - mmengine - INFO - Iter(train) [ 1650/40000]  lr: 9.6319e-03  eta: 2:03:54  time: 0.1925  data_time: 0.0024  loss: 0.6991  decode.loss_ce: 0.2893  decode.loss_dice: 0.2993  decode.acc_seg: 88.2629  aux.loss_ce: 0.1105  aux.acc_seg: 89.6667
2024/04/10 16:10:27 - mmengine - INFO - Iter(train) [ 1700/40000]  lr: 9.6207e-03  eta: 2:03:44  time: 0.1935  data_time: 0.0024  loss: 0.7430  decode.loss_ce: 0.3214  decode.loss_dice: 0.3057  decode.acc_seg: 92.6239  aux.loss_ce: 0.1159  aux.acc_seg: 91.8945
2024/04/10 16:10:36 - mmengine - INFO - Iter(train) [ 1750/40000]  lr: 9.6095e-03  eta: 2:03:34  time: 0.1933  data_time: 0.0025  loss: 0.6719  decode.loss_ce: 0.2779  decode.loss_dice: 0.2852  decode.acc_seg: 86.1191  aux.loss_ce: 0.1088  aux.acc_seg: 84.5047
2024/04/10 16:10:46 - mmengine - INFO - Iter(train) [ 1800/40000]  lr: 9.5983e-03  eta: 2:03:23  time: 0.1916  data_time: 0.0025  loss: 0.7667  decode.loss_ce: 0.3296  decode.loss_dice: 0.3137  decode.acc_seg: 89.0274  aux.loss_ce: 0.1234  aux.acc_seg: 89.6622
2024/04/10 16:10:55 - mmengine - INFO - Iter(train) [ 1850/40000]  lr: 9.5872e-03  eta: 2:03:12  time: 0.1928  data_time: 0.0025  loss: 0.7726  decode.loss_ce: 0.3264  decode.loss_dice: 0.3219  decode.acc_seg: 86.6898  aux.loss_ce: 0.1243  aux.acc_seg: 87.5198
2024/04/10 16:11:05 - mmengine - INFO - Iter(train) [ 1900/40000]  lr: 9.5760e-03  eta: 2:03:02  time: 0.1946  data_time: 0.0024  loss: 0.5800  decode.loss_ce: 0.2335  decode.loss_dice: 0.2502  decode.acc_seg: 93.0145  aux.loss_ce: 0.0963  aux.acc_seg: 92.7063
2024/04/10 16:11:15 - mmengine - INFO - Iter(train) [ 1950/40000]  lr: 9.5648e-03  eta: 2:02:51  time: 0.1930  data_time: 0.0024  loss: 0.6637  decode.loss_ce: 0.2709  decode.loss_dice: 0.2862  decode.acc_seg: 86.9080  aux.loss_ce: 0.1066  aux.acc_seg: 86.1252
2024/04/10 16:11:24 - mmengine - INFO - Exp name: unet-s5-d16_deeplabv3_4xb4-ce-1.0-dice-3.0-40k_chase-db1-128x128_20240410_160452
2024/04/10 16:11:24 - mmengine - INFO - Iter(train) [ 2000/40000]  lr: 9.5536e-03  eta: 2:02:41  time: 0.1927  data_time: 0.0024  loss: 0.6524  decode.loss_ce: 0.2697  decode.loss_dice: 0.2753  decode.acc_seg: 90.1627  aux.loss_ce: 0.1074  aux.acc_seg: 90.4922
2024/04/10 16:11:34 - mmengine - INFO - Iter(train) [ 2050/40000]  lr: 9.5424e-03  eta: 2:02:31  time: 0.1953  data_time: 0.0024  loss: 0.6109  decode.loss_ce: 0.2645  decode.loss_dice: 0.2506  decode.acc_seg: 91.9678  aux.loss_ce: 0.0957  aux.acc_seg: 91.3559
2024/04/10 16:11:44 - mmengine - INFO - Iter(train) [ 2100/40000]  lr: 9.5312e-03  eta: 2:02:21  time: 0.1913  data_time: 0.0024  loss: 0.7280  decode.loss_ce: 0.3161  decode.loss_dice: 0.2927  decode.acc_seg: 92.7368  aux.loss_ce: 0.1192  aux.acc_seg: 92.6804
2024/04/10 16:11:53 - mmengine - INFO - Iter(train) [ 2150/40000]  lr: 9.5200e-03  eta: 2:02:10  time: 0.1924  data_time: 0.0024  loss: 0.6430  decode.loss_ce: 0.2677  decode.loss_dice: 0.2728  decode.acc_seg: 89.7629  aux.loss_ce: 0.1025  aux.acc_seg: 89.9979
2024/04/10 16:12:03 - mmengine - INFO - Iter(train) [ 2200/40000]  lr: 9.5088e-03  eta: 2:02:00  time: 0.1936  data_time: 0.0024  loss: 0.5678  decode.loss_ce: 0.2222  decode.loss_dice: 0.2471  decode.acc_seg: 92.2745  aux.loss_ce: 0.0984  aux.acc_seg: 91.8442
2024/04/10 16:12:13 - mmengine - INFO - Iter(train) [ 2250/40000]  lr: 9.4976e-03  eta: 2:01:50  time: 0.1942  data_time: 0.0024  loss: 0.6502  decode.loss_ce: 0.2698  decode.loss_dice: 0.2780  decode.acc_seg: 84.0637  aux.loss_ce: 0.1024  aux.acc_seg: 84.8785
2024/04/10 16:12:22 - mmengine - INFO - Iter(train) [ 2300/40000]  lr: 9.4864e-03  eta: 2:01:40  time: 0.1911  data_time: 0.0025  loss: 0.7035  decode.loss_ce: 0.3082  decode.loss_dice: 0.2813  decode.acc_seg: 92.8345  aux.loss_ce: 0.1141  aux.acc_seg: 91.4520
2024/04/10 16:12:32 - mmengine - INFO - Iter(train) [ 2350/40000]  lr: 9.4752e-03  eta: 2:01:30  time: 0.1941  data_time: 0.0025  loss: 0.7560  decode.loss_ce: 0.3280  decode.loss_dice: 0.3084  decode.acc_seg: 83.7585  aux.loss_ce: 0.1196  aux.acc_seg: 84.2926
2024/04/10 16:12:42 - mmengine - INFO - Iter(train) [ 2400/40000]  lr: 9.4640e-03  eta: 2:01:21  time: 0.1921  data_time: 0.0025  loss: 0.6041  decode.loss_ce: 0.2485  decode.loss_dice: 0.2580  decode.acc_seg: 89.5294  aux.loss_ce: 0.0976  aux.acc_seg: 90.9775
2024/04/10 16:12:51 - mmengine - INFO - Iter(train) [ 2450/40000]  lr: 9.4528e-03  eta: 2:01:11  time: 0.1929  data_time: 0.0025  loss: 0.6316  decode.loss_ce: 0.2748  decode.loss_dice: 0.2572  decode.acc_seg: 89.0244  aux.loss_ce: 0.0996  aux.acc_seg: 88.0951
2024/04/10 16:13:01 - mmengine - INFO - Iter(train) [ 2500/40000]  lr: 9.4416e-03  eta: 2:01:02  time: 0.1990  data_time: 0.0023  loss: 0.7114  decode.loss_ce: 0.2978  decode.loss_dice: 0.3000  decode.acc_seg: 88.0249  aux.loss_ce: 0.1136  aux.acc_seg: 87.0056
2024/04/10 16:13:11 - mmengine - INFO - Iter(train) [ 2550/40000]  lr: 9.4303e-03  eta: 2:00:54  time: 0.1982  data_time: 0.0023  loss: 0.5330  decode.loss_ce: 0.2159  decode.loss_dice: 0.2305  decode.acc_seg: 89.0015  aux.loss_ce: 0.0866  aux.acc_seg: 88.6383
